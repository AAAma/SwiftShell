String.swift
	public func replace (oldString: String, _ newString: String) -> String
	public func split (sep: String) -> [String]
	public func trim () -> String
	public func countOccurrencesOf (substring: String) -> Int
Pipes.swift
	public func |> <T,U> (lhs: T, rhs: T -> U) -> U
FileHandle.swift
	public typealias FileHandle = NSFileHandle
	public func readSome () -> String?
	public func read () -> String
	public func lines () -> AnySequence<String>
	public func writeTo <Target : OutputStreamType> (inout target: Target)
	public typealias FileHandle = NSFileHandle
	public func write (string: String)
	public func writeln (string: String)
	public func writeln ()
	public func closeStream ()
	public let environment		= NSProcessInfo.processInfo().environment as [String: String]
	public let standardinput	= FileHandle.fileHandleWithStandardInput() as ReadableStreamType
	public let standardoutput	= FileHandle.fileHandleWithStandardOutput() as WriteableStreamType
	public let standarderror	= FileHandle.fileHandleWithStandardError() as WriteableStreamType
Stream.swift
	public var streamencoding = NSUTF8StringEncoding
	func write (string: String)
	func writeln (string: String)
	func writeln ()
	public func |>> <T> (input: T, stream: WriteableStreamType)
	public func |>> <S : SequenceType> (seq: S, stream: WriteableStreamType)
